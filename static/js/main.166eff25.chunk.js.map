{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","App.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","contactsActions","addContact","createAction","deleteContact","changeFilter","ContactForm","state","name","number","hendelInputChange","event","setState","currentTarget","value","hendelSubmit","preventDefault","newContact","id","uuidv4","props","onAddContact","className","styles","onSubmit","this","type","pattern","title","required","onChange","Component","connect","dispatch","contact","Filter","filter","useSelector","contacts","useDispatch","Contact","button","onClick","ContactList","items","toLowerCase","includes","map","item","App","container","createReducer","actions","payload","some","contactItem","alert","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.166eff25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3VgZM\",\"item\":\"ContactList_item__1ra8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__2Gp3y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3U-14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contact_button__pKMVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1Da0a\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact/add');\nconst deleteContact = createAction('contact/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\n\nexport default contactsActions;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  hendelInputChange = event => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  hendelSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.onAddContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className={styles.ContactForm} onSubmit={this.hendelSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.name}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.number}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(contactsActions.addContact(contact)),\n});\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n  const onChangeFilter = event =>\n    dispatch(contactsActions.changeFilter(event.currentTarget.value));\n\n  return (\n    <label className={styles.Filter}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={onChangeFilter}\n        value={filter}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Contact.module.css';\nimport { useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>\n        {name} {number}\n      </p>\n      <button\n        className={styles.button}\n        type=\"button\"\n        onClick={() => dispatch(contactsActions.deleteContact(id))}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default Contact;\n","import React, { useState } from 'react';\nimport Contact from '../Contact/Contact';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\n\nconst ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  return (\n    <ul className={styles.ContactList}>\n      {contacts\n        .filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()),\n        )\n        .map(({ id, name, number }) => (\n          <li key={id} className={styles.item}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n    </ul>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  filter: PropTypes.string,\n};\n\nexport default ContactList;\n","import ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport 'modern-normalize/modern-normalize.css';\nimport styles from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={styles.container}>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import actions from './/contacts-actions';\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => {\n    {\n      const isAvailable = state.some(\n        contactItem =>\n          contactItem.name.toLowerCase() === payload.name.toLowerCase(),\n      );\n      if (isAvailable) {\n        alert(`${payload.name} is already in contacts.`);\n        return state;\n      }\n    }\n    return [...state, payload];\n  },\n\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
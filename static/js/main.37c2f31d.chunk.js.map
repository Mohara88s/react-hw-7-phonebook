{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operaions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","changeFilter","createAction","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","ContactForm","state","name","number","hendelInputChange","event","setState","currentTarget","value","hendelSubmit","preventDefault","props","contacts","some","contactItem","toLowerCase","alert","newContact","id","uuidv4","onAddContact","className","styles","onSubmit","this","type","pattern","title","required","onChange","Component","connect","items","dispatch","contact","a","post","data","addContact","Filter","filter","useSelector","useDispatch","Contact","button","onClick","delete","deleteContact","ContactList","useEffect","get","includes","map","item","App","container","createReducer","_","payload","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c2f31d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__2GTHP\",\"item\":\"ContactList_item__aniGB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__3wMxD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3e1p_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contact_button__29gxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1cF0v\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n","import {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get(`/contacts`);\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post(`/contacts`, contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operaions';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  hendelInputChange = event => {\n    this.setState({ [event.currentTarget.name]: event.currentTarget.value });\n  };\n  hendelSubmit = event => {\n    event.preventDefault();\n\n    const isAvailable = this.props.contacts.some(\n      contactItem =>\n        contactItem.name.toLowerCase() === this.state.name.toLowerCase(),\n    );\n    if (isAvailable) {\n      alert(`${this.state.name} is already in contacts.`);\n      this.setState({\n        name: '',\n        number: '',\n      });\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.onAddContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className={styles.ContactForm} onSubmit={this.hendelSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.name}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.hendelInputChange}\n            value={this.state.number}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(addContact(contact)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n  const onChangeFilter = event =>\n    dispatch(changeFilter(event.currentTarget.value));\n\n  return (\n    <label className={styles.Filter}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={onChangeFilter}\n        value={filter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Contact.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operaions';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>\n        {name} {number}\n      </p>\n      <button\n        className={styles.button}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\nexport default Contact;\n","import React from 'react';\nimport Contact from '../Contact/Contact';\nimport styles from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contacts-operaions';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, []);\n\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  return (\n    <ul className={styles.ContactList}>\n      {contacts\n        .filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()),\n        )\n        .map(({ id, name, number }) => (\n          <li key={id} className={styles.item}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport styles from './App.module.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2>Phonebook</h2>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    return [...state, payload];\n  },\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  loading,\n  error,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}